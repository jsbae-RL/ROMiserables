GIT명령어


1. 새로운 저장소 생성
-$ git init                 #git 하위 디렉토리 생성(폴더 만들고 그 안에서 명령 실행=>새로운 git저장소 생성)


2. 저장소 복제/다운로드(clone) : 원격 저장소의 내용을 다 복사하여 컴퓨터로 가져옴
github에서 프로젝트를 내 컴퓨터로 다운로드 받는 것과 같음
-$ git clone<https://......URL>   #기존 소스 코드 다운로드/복제 
-$ git clone /로컬/저장소/경로  #로컬 저장소 복제
-$ git clone 사용자명@호스트:/원격/저장소/경로     #원격 서버 저장소 복제


3. 추가 및 확정(commit) : 안전하게 저장
-$ git add<파일명>           #commit에 단일의 파일 변경사항 포함
-$ git add *                     #인덱스에 추가된 상태
-$ git add -A                   #commit에 파일의 변경 사항을 한 번에 모두 포함
-$ git commit -m "commit message"   #커밋 생성(실제 변경사항 저장)
-$ git status                    #파일 상태 확인

4. 가지치기 작업(branch) : 새로운 아이디어 시도
-$ git branch                  #branch 목록
-$ git branch<branch name>    #new branch 생성(lacal로 만듦)
-$ git branch -b<branch name>   #branch 생성+이동
-$ git chechkout -b expressPrac    #branch 생성 후 이동


5. 갱신 및 병합(merge) : 두 개의 브랜 하나로 병합, 생성한 브랜치에서 작업한 기능 메인 프로젝트에 추가
-$ git pull                    #원격 저장소의 변경 내용이 현재 디렉토리에 가져와지고(fetch) 병합(merge)됨
-$ git merge<other branch name>   #현재 branch에 다른 branch의 수정사항 병합
-$ git add <file name>   #각 파일 병합
-$ git diff<branch name><other branch name>    #변경 내용 merge전에 바뀐 내용과 비교 가능


6. 변경 사항 발행(push) : 작업한 내용을 원격 저장소에 업로드
-$ git push origin master      #변경사항 원격 서버 업로드
-$ git push <remote><branch name>   #commit을 원격 서버에 업로드
-$ git push -u<remotee><branch name>  #commit을 원격 서버에 업로드
-$ git remote add origin<registered remote server address>   #클라우드 주소 등록 및 발행(git에게 새로운 원격 서버 주소 알림)
-$ git remote remove<registered cloud address>   #클라우드 주소 삭제
-$ git push origin expressPrac                #push하기

7. 태그 작업
-$ git log          #현재 위치한 브랜치 커밋 내용 확인 및 식별자 부여



8. 로컬 변경사항 return 작업
-$ git chechout-- <file name>     #로컬의 변경 사항을 변경 전으로 되돌림(ctrl+z)
-$ git fetch origin                     #원격에 저장된 git프로젝트의 현 상태 다운로드



CLI(Command Line Interface) 명령어 : 터미널을 통해 사용자-컴퓨터 상호작용


1. 관리자 권한 실행
-$ sudo(super user do)   #관리자만 읽을 수 있는 파일 읽기
                                 #새로운 프로그램 설치(Ubuntu Linux)
                                 #Notes: 새로운 프로그램 설치시 Package Manager를 이용

2. 기본적인 unix/linux 명령어
-$ls(list)                       #파일 보기
-$al(all)                        #파일 세부 내용 확인

$ ls -al의 상세 내용(권한)
a. 접근 권한(읽기,쓰기,실행 가능)여부
b. 링크된 파일 개수
c. 소유자
d. 소유 그룹
e. 파일 크기
f. 만든 날짜
g. 만든 시간
h. 파일/디렉토리 이름

-$ cd(change directory)     #디렉토리로 이동
-$pwd(print working directory)  #full 디렉토리 path 확인(디렉토리 위치 변경)

3. 디렉토리로 이동
-$ cd ~       #홈 디렉토리(현재 사용자 개인 파일 디렉토리)
-$ cd /        #루트 디렉토리(시스템 최상위 디렉토리 확인)/(매우 중요한 디렉토리를 의미하며 관리자 권한 요구)
-$ cd .         # 현재 디렉토리
-$ cd ..        #부모 디렉토리
-$ pwd        #현재 full 디렉토리 확인
-$ clear        #터미널의 입력 내용들을 지워줌


4. 자주 쓰는 명령어
-$ touch [file_name]    #빈 파일 생성 / (not 디렉토리/ literally 파일 생성)
-$ mkdir [dir_name](make directory)   #디렉토리 생성
-$ cat [file_name](concatenate-사슬같이 이음)          #텍스트 형태의 파일 확인
-$ mv [file_name or dic_name] [target_dir_name](move)   #파일 또는 디렉토리 옮기기
-$ mv [file_name or dir_name] [new_file_name]        #파일 및 디렉토리 이름 바꾸기
-$ cp [file] [target_dir_name](copy)      #복사
-$ cp -r[folder_name]                       #복사


5. 삭제(즉시 삭제)
-$ rm [file_name](remove)      #파일 삭제
-$ rm -r [dir_name]               #폴더 삭제


6. 파일 소유권 변경
-$ chown [owner_file]:[group_file](change owner)   #파일 소유권 변경
-$ mkdir                             #디렉토리 생성
-$ rm                                 #삭제



7. GUI프로그램 실행 간편하게
-$ explorer .                       #현재 폴더를 windows 파일 관리자에서 보기
-$ open .                           #현재 폴더를 macOS finder에서 보기
-$ code .                           #현재 폴더를 VS Code 에디터로 열기


8. 파일 이름에 따른 팁
-공백이 있는 경우 : 공백 부분에 tab키 누르기 / 역슬래시 입력
-파일 자동완성 기능 : 첫글자 등을 쓰고 tab 키 누르기



