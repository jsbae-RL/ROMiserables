# https://school.programmers.co.kr/learn/courses/30/lessons/43165
'''0
문제 설명
n개의 음이 아닌 정수들이 있습니다. 이 정수들을 순서를 바꾸지 않고 적절히 더하거나 빼서 타겟 넘버를 만들려고 합니다. 예를 들어 [1, 1, 1, 1, 1]로 숫자 3을 만들려면 다음 다섯 방법을 쓸 수 있습니다.

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

사용할 수 있는 숫자가 담긴 배열 numbers, 타겟 넘버 target이 매개변수로 주어질 때 숫자를 적절히 더하고 빼서 타겟 넘버를 만드는 방법의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
    - 주어지는 숫자의 개수는 2개 이상 20개 이하입니다.
    - 각 숫자는 1 이상 50 이하인 자연수입니다.
    - 타겟 넘버는 1 이상 1000 이하인 자연수입니다.

입출력 예
    numbers             target	    return
    [1, 1, 1, 1, 1]	    3	        5
    [4, 1, 2, 1]	    4	        2

입출력 예 설명

입출력 예 #1
    - 문제 예시와 같습니다.

입출력 예 #2
    +4+1-2+1 = 4
    +4-1+2-1 = 4
    총 2가지 방법이 있으므로, 2를 return 합니다.
'''
#------------------------------------------------------------------------------------------------------------------------------------------------------------------
'''
예제분석
    - 위의 예제 중 두번째 [4, 1, 2, 1]의 정수들을 더하거나 뺏을 때 분기점이 나뉩니다.
    - 이걸 이진트리로 표현하면 다음과 같습니다. (왼쪽은 덧셈, 오른쪽은 뺄셈으로 가정합니다.)

                        0
                       / \ 
                      /   \ 
                     /     \   
                    /       \ 
                   /         \  
                  /           \  
                 /             \  
                /               \  
               /                 \  
              /                   \  
             /                     \  
            +4                     -4
          /   \                  /    \  
         /     \                /      \   
        /       \              /        \ 
       /         \            /          \ 
     +1          -1          +1          -1
    /   \       /   \       /   \       /   \ 
  +2    -2    +2    -2    +2    -2    +2    -2
  /\    /\    /\    /\    /\    /\    /\     /\ 
+1 -1 +1 -1 +1 -1 +1 -1 +1 -1 +1 -1 +1 -1  +1 -1

    - 이를 계산하면

                        0
                       / \ 
                      /   \ 
                     /     \   
                    /       \ 
                   /         \  
                  /           \  
                 /             \  
                /               \  
               /                 \  
              /                   \  
             /                     \  
            4                      -4
          /   \                  /    \  
         /     \                /      \   
        /       \              /        \ 
       /         \            /          \ 
      5           3          -3          -5
    /   \       /   \       /   \       /   \ 
   7     3     5     1    -1    -5    -3    -7
  /\    /\    /\    /\    /\    /\    /\     /\ 
 8  6  4  2  6  4  2  0  0 -2 -4 -6 -2 -4  -6 -8

    - [4, 1, 2, 1]... 모든 정수를 소모하였을때, 4가 나오는 경우의 수가 2가지임을 알 수 있습니다.
'''

# 1. 정수 리스트를 받는다
# 예시 [5,9,7,2,6]

# 2. 딕셔너리로 처리할수 없을것같음..
# [
#   0: n , -n
#   n: 0,a,-a
#   -n:0,a,-a
#   a:n,b,-b
#   -a:n,b,-b
#   b:a,
# ]

# 3. 파이썬 이진트리 구현법
# - 노드 클래스 생성
# - 각 노드 생성
# - 트리 클래스 생성
# - 노드를 트리클래스로 엮는다

# 4. 노드로 만들 데이터 처리(item list 생성성)
# 예시 [5,9,7,2,6] 여기에 0추가 [0,5,9,7,2,6]
# 차례대로 트리를 만들려면 0 5 -5 9 -9 9 -9 ... 
# 이런식으로 일단 만들음
# 입력 Nlist = 어쩌구구
# for i,num in enumerate(Nlist):
#       for j in 2*i:
#           if j % 2 != 0:
#             node_list.append(-num)
#           else:
#             node_list.append(num)

# 5. 노드 클래스 생성
# class Node:
#   def __init__(self,item):
#     self.item = item
#     self.left = None
#     self.right = None
    

# 6. 아이템 리스트를 각 노드로 만들어 노드 리스트 생성성
# def make_Nodelist(itemlist):
#   node_list = []
#   for i in itemlist:
#     node_list.append(i)
#   return node_list

# 7. 트리 클래스
# class BinaryTree:
#   def __init__(self):
#     self.root = None
    
# 8. 노드를 트리 클래스로 엮는다
# tree = BinaryTree()
# tree.root = n0
# n0.left = n1
# n0.right = n2
# n1.left = n3
# n1.right = n4
# ...

# def make_Tree(Node_list):
#     tree = BinaryTree()
#     tree.root(Node_list[0])
#     for i,node in enumerate(Node_list[0:-(2**(N-1))]):
#         node.left = Node_list[2*i+1]
#         node.right = Node_list[2*i+2]
#     return tree

# 9. 타겟 넘버 탐색
# -1 루트에서 left 부터 끝까지 탐색
# -2 (지나온 숫자들 리스트에 저장)자식 노드가 없는 경우 멈추고 지나온 숫자들 합
# -3 타겟넘버랑 같으면 리스트 통째로 정답 리스트에 저장
# -4 지나온 숫자들 리스트에서 마지막 숫자 없애기
# -5 전 레벨로 올라가서 right 노드 들어간후 2 반복

